const { Server } = require("./models/server.js");
const { getBooks, getBookById } = require("./controllers/bookController.js");
const { deleteBookById } = require("./controllers/bookController.js");
const { insertBooks, updateBookById } = require("./controllers/bookController.js");
const { getInstruction, getVideo } = require("./controllers/baseController.js");
const { NoTypeData } = require("./exceptions/exceptions.js")

let server = new Server();

server.GET("/", async (request, response) => {
    try {
        let instruction = await getInstruction();
        response.end(instruction);
    } catch (error) {
        response.end(error.message);
    }
});

server.GET("/test", async (request, response) => {
    try {
        let video = await getVideo();
        response.end(video);
    } catch (error) {
        response.end(error.message);
    }
});

server.GET("/books", async (request, response) => {
    let books = await getBooks();
    response.write(JSON.stringify(books));
    response.end();
});

server.GET("/books/\\d+", async (request, response) => {
    let id = Number(/\d+$/.exec(request.url)[0]);
    let book = await getBookById(id);
    response.end(JSON.stringify(book));
});

server.DELETE("/books/\\d+", async (request, response) => {
    let id = Number(/\d+$/.exec(request.url)[0]);
    let number = await deleteBookById(id);
    response.end(`${number}`);
});

server.POST("/books", (request, response) => {
    request.on("data", async data => {
        try {
            let number = await insertBooks(JSON.parse(data.toString()));
            response.end(`${number}`);
        } catch (error) {
            response.writeHead(500);
            response.write(error.message);
            response.end();
        }
    })
});

server.PUT("/books/\\d+", async (request, response) => {
    let id = Number(/\d+$/.exec(request.url)[0]);
    request.on("data", async data => {
        try {
            data = JSON.parse(data.toString());
            if (!Object.keys(data).includes('id')) throw new NoTypeData("Object hasn't 'id'", 400);
            if (!Object.keys(data).includes('name')) throw new NoTypeData("Object hasn't 'name'", 400);

            let number = await updateBookById(id, data);
            response.end(`${number}`);
        } catch (error) {
            response.writeHead(error.code ? error.code : 500);
            response.write(error.message);
            response.end();
        }
    })
});
///////////////////////
const { readFile } = require("fs").promises;
server.GET("/picture.jpg", async (request, response) => {
    console.log(1);
    //readFile("./test.png").then(text => {console.log(text.toString());response.end(text)});
    let str = "/9j/4QazRXhpZgAATU0AKgAAAAgADAEAAAMAAAABAEQAAAEBAAMAAAABAEUAAAECAAMAAAADAAAAngEGAAMAAAABAAIAAAESAAMAAAABAAEAAAEVAAMAAAABAAMAAAEaAAUAAA";
    str += "ABAAAApAEbAAUAAAABAAAArAEoAAMAAAABAAIAAAExAAIAAAAiAAAAtAEyAAIAAAAUAAAA1odpAAQAAAABAAAA7AAAASQACAAIAAgADqYAAAAnEAAOpgAAACcQQWRvYmUgUGhvdG9zaG9wIENDIDIwMTkgKFdpbmRvd3MpADIwMjM6MDI6MjAgMTY6NTQ6MDAAAAAABJAAAAcAAAAEMDIzMaABAAMAAAAB";
    str += "//8AAKACAAQAAAABAAAAOaADAAQAAAABAAAAMwAAAAAAAAAGAQMAAwAAAAEABgAAARoABQAAAAEAAAFyARsABQAAAAEAAAF6ASgAAwAAAAEAAgAAAgEABAAAAAEAAAGCAgIABAAAAAEAAAUpAAAAAAAAAEgAAAABAAAASAAAAAH/2P/tAAxBZG9iZV9DTQAB/+4ADkFkb2JlAGSAAAAAAf/bAIQADAgICAkIDAkJDBELCgsRFQ8MDA8VGBMTFRMTGBEMDAwMDAwRDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAENCwsNDg0QDg4QFA4ODhQUDg4ODhQRDAwMDAwREQwMDAwMDBEMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM/8AAEQgAJgAqAwEiAAIRAQMRAf/dAAQAA//EAT8AAAEFAQEBAQEBAAAAAAAAAAMAAQIEBQYHCAkKCwEAAQUBAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAABBAEDAgQCBQcGCAUDDDMBAAIRAwQhEjEFQVFhEyJxgTIGFJGhsUIjJBVSwWIzNHKC0UMHJZJT8OHxY3M1FqKygyZEk1RkRcKjdDYX0lXiZfKzhMPTdePzRieUpIW0lcTU5PSltcXV5fVWZnaGlqa2xtbm9jdHV2d3h5ent8fX5/cRAAICAQIEBAMEBQYHBwYFNQEAAhEDITESBEFRYXEiEwUygZEUobFCI8FS0fAzJGLhcoKSQ1MVY3M08SUGFqKygwcmNcLSRJNUoxdkRVU2dGXi8rOEw9N14/NGlKSFtJXE1OT0pbXF1eX1VmZ2hpamtsbW5vYnN0dXZ3eHl6e3x//aAAwDAQACEQMRAD8A9RstrqYX2uDGNEuc4wAFwfX/AK7Zjr46bc7Fxq3OYbAwOc8j893qMd6bPzGM+mo/XLrebb1W7pddgrx8ctDm8bi5rHlznfyPUWP0Tp1XVcq/HynmirBodkVtrgOa7ezb9IbH+32/RTJSJNB2uS5HFixfeeYqYIEhH5oiMv8AunZp6r9cr6sjIGQ+urEY2x7X1Vtc8PHs9LcxV6Prl9YsXIZZml9lYP6XGfW1jg3TX6Fb/wA5dMWxTbVMO+y4pLSAXRuh29v5y5T67u2fWINYOKQQwaDV2zc8R7mpESAu13LSwZ8kscsOOMZDSQjw8AjwvoXT+p4nUccZGI8WMOh7Fp/de0/RVuV5R0TrOX0rJpvwbPUxrnhltBJ2O3P2bmQ36bZXq0n8EeMVbB/or+lDHxfqiDk4v0uCPD/3z//Qn9aamv8ArP1AkAgPZuGsk+hWNrW/zfuZ+8rH+L+oW9bzK7AHsdigancNm5m0NP5+5av1w+qt9t9nWMEl9lg/WceY0azZ61boc7dtYz2Lnvqx";
    str += "1WvpHWzlWsd6GSz0rYAJbJa7e41+32O9m1R1UrOz0Ecgz8hwYtZxgImPXiiH004mNBHpthwa06dmfzbf7KwusUUdFHVfrE9zTk20irHLxu2mCK6w3+XY78xbdfUcG2kX13M9PmSQP+ifcuF+tvX8frFteFiPeKcV7nWkAgPsGlbfd/o/51SSOluZyeDLkyiFSEdsn935uH/mvNY9TpqDm7iLWvMNl73bw6GtXtK4r6j9Bkt6xe3axsjCrIOs6OzO302ueyj/ALd/cXZx8eJUfCeH8XWPOYTz0cfF8sJYuP8AR9yc4S9v/wAb4eN//9H1PRcL9Y8L6s355czqJw7g4+uxlT7KiY9382z0m2LxFJNnt0+rd+HcXunh9y6/yPB/z/d9L6u7pn1b3tLutUl4J0+zWQT/AC4H0UbF6d9WGWPfm9WdbjiHPrrouZIA99e5zH/obP8Agvf/AC15EkmCvD8XU/W6/wC6Nv8AJ/deN+pq/T2N9ONkDZHER7dql/d+C+V0lM8/+l9fq//Z/+0OalBob3Rvc2hvcCAzLjAAOEJJTQQEAAAAAAAHHAIAAAIAAAA4QklNBCUAAAAAABDo8VzzL8EYoaJ7Z63FZNW6OEJJTQQ6AAAAAAEdAAAAEAAAAAEAAAAAAAtwcmludE91dHB1dAAAAAUAAAAAUHN0U2Jvb2wBAAAAAEludGVlbnVtAAAAAEludGUAAAAASW1nIAAAAA9wcmludFNpeHRlZW5CaXRib29sAAAAAAtwcmludGVyTmFtZVRFWFQAAAAUAFIASQBDAE8ASAAgAFMAUAAgADEAMQAxAFMAVQAgAEQARABTAFQAAAAAAA9wcmludFByb29mU2V0dXBPYmpjAAAAFQQfBDAEQAQwBDwENQRCBEAESwAgBEYEMgQ1BEIEPgQ/BEAEPgQxBEsAAAAAAApwcm9vZlNldHVwAAAAAQAAAABCbHRuZW51bQAAAAxidWlsdGluUHJvb2YAAAAJcHJvb2ZDTVlLADhCSU0EOwAAAAACLQAAABAAAAABAAAAAAAScHJpbnRPdXRwdXRPcHRpb25zAAAAFwAAAABDcHRuYm9vbAAAAAAAQ2xicmJvb2wAAAAAAFJnc01ib29sAAAAAABDcm5DYm9vbAAAAAAAQ250Q2Jvb2wAAAAAAExibHNib29sAAAAAABOZ3R2Ym9vbAAAAAAARW1sRGJvb2wAAAAAAEludHJib29sAAAAAABCY2tnT2JqYwAAAAEAAAAAAABSR0JDAAAAAwAAAABSZCAgZG91YkBv4AAAAAAAAAAAAEdybiBkb3ViQG/gAAAAAAAAAAAAQmwgIGRvdWJAb+AAAAAAAAAAAABCcmRUVW50RiNSbHQAAAAAAAAAAAAAAABCbGQgVW50RiNSbHQAAAAAAAAAAAAAAABSc2x0VW50RiNQeGxAWAAAAAAAAAAAAAp2ZWN0b3JEYXRhYm9vbAEAAAAAUGdQc2VudW0AAAAAUGdQcwAAAABQZ1BDAAAAAExlZnRVb";
    str += "nRGI1JsdAAAAAAAAAAAAAAAAFRvcCBVbnRGI1JsdAAAAAAAAAAAAAAAAFNjbCBVbnRGI1ByY0BZAAAAAAAAAAAAEGNyb3BXaGVuUHJpbnRpbmdib29sAAAAAA5jcm9wUmVjdEJvdHRvbWxvbmcAAAAAAAAADGNyb3BSZWN0TGVmdGxvbmcAAAAAAAAADWNyb3BSZWN0UmlnaHRsb25nAAAAAAAAAAtjcm9wUmVjdFRvcGxvbmcAAAAAADhCSU0D7QAAAAAAEABgAAAAAQABAGAAAAABAAE4QklNBCYAAAAAAA4AAAAAAAAAAAAAP4AAADhCSU0EDQAAAAAABAAAAB44QklNBBkAAAAAAAQAAAAeOEJJTQPzAAAAAAAJAAAAAAAAAAABADhCSU0nEAAAAAAACgABAAAAAAAAAAE4QklNA/UAAAAAAEgAL2ZmAAEAbGZmAAYAAAAAAAEAL2ZmAAEAoZmaAAYAAAAAAAEAMgAAAAEAWgAAAAYAAAAAAAEANQAAAAEALQAAAAYAAAAAAAE4QklNA/gAAAAAAHAAAP////////////////////////////8D6AAAAAD/////////////////////////////A+gAAAAA/////////////////////////////wPoAAAAAP////////////////////////////8D6AAAOEJJTQQIAAAAAAAQAAAAAQAAAkAAAAJAAAAAADhCSU0EHgAAAAAABAAAAAA4QklNBBoAAAAAA0MAAAAGAAAAAAAAAAAAAAAzAAAAOQAAAAcAdwBhAHIAbgBpAG4AZwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAOQAAADMAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAQAAAAAAAG51bGwAAAACAAAABmJvdW5kc09iamMAAAABAAAAAAAAUmN0MQAAAAQAAAAAVG9wIGxvbmcAAAAAAAAAAExlZnRsb25nAAAAAAAAAABCdG9tbG9uZwAAADMAAAAAUmdodGxvbmcAAAA5AAAABnNsaWNlc1ZsTHMAAAABT2JqYwAAAAEAAAAAAAVzbGljZQAAABIAAAAHc2xpY2VJRGxvbmcAAAAAAAAAB2dyb3VwSURsb25nAAAAAAAAAAZvcmlnaW5lbnVtAAAADEVTbGljZU9yaWdpbgAAAA1hdXRvR2VuZXJhdGVkAAAAAFR5cGVlbnVtAAAACkVTbGljZVR5cGUAAAAASW1nIAAAAAZib3VuZHNPYmpjAAAAAQAAAAAAAFJjdDEAAAAEAAAAAFRvcCBsb25nAAAAAAAAAABMZWZ0bG9uZwAAAAAAAAAAQnRvbWxvbmcAAAAzAAAAAFJnaHRsb25nAAAAOQAAAAN1cmxURVhUAAAAAQAAAAAAAG51bGxURVhUAAAAAQAAAAAAAE1zZ2VURVhUAAAAAQAAAAAABmFsdFRhZ1RFWFQAAAABAAAAAAAOY2VsbFRleHRJc";
    str += "0hUTUxib29sAQAAAAhjZWxsVGV4dFRFWFQAAAABAAAAAAAJaG9yekFsaWduZW51bQAAAA9FU2xpY2VIb3J6QWxpZ24AAAAHZGVmYXVsdAAAAAl2ZXJ0QWxpZ25lbnVtAAAAD0VTbGljZVZlcnRBbGlnbgAAAAdkZWZhdWx0AAAAC2JnQ29sb3JUeXBlZW51bQAAABFFU2xpY2VCR0NvbG9yVHlwZQAAAABOb25lAAAACXRvcE91dHNldGxvbmcAAAAAAAAACmxlZnRPdXRzZXRsb25nAAAAAAAAAAxib3R0b21PdXRzZXRsb25nAAAAAAAAAAtyaWdodE91dHNldGxvbmcAAAAAADhCSU0EKAAAAAAADAAAAAI/8AAAAAAAADhCSU0EFAAAAAAABAAAAAE4QklNBAwAAAAABUUAAAABAAAAKgAAACYAAACAAAATAAAABSkAGAAB/9j/7QAMQWRvYmVfQ00AAf/uAA5BZG9iZQBkgAAAAAH/2wCEAAwICAgJCAwJCQwRCwoLERUPDAwPFRgTExUTExgRDAwMDAwMEQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwBDQsLDQ4NEA4OEBQODg4UFA4ODg4UEQwMDAwMEREMDAwMDAwRDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDP/AABEIACYAKgMBIgACEQEDEQH/3QAEAAP/xAE/AAABBQEBAQEBAQAAAAAAAAADAAECBAUGBwgJCgsBAAEFAQEBAQEBAAAAAAAAAAEAAgMEBQYHCAkKCxAAAQQBAwIEAgUHBggFAwwzAQACEQMEIRIxBUFRYRMicYEyBhSRobFCIyQVUsFiMzRygtFDByWSU/Dh8WNzNRaisoMmRJNUZEXCo3Q2F9JV4mXys4TD03Xj80YnlKSFtJXE1OT0pbXF1eX1VmZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3EQACAgECBAQDBAUGBwcGBTUBAAIRAyExEgRBUWFxIhMFMoGRFKGxQiPBUtHwMyRi4XKCkkNTFWNzNPElBhaisoMHJjXC0kSTVKMXZEVVNnRl4vKzhMPTdePzRpSkhbSVxNTk9KW1xdXl9VZmdoaWprbG1ub2JzdHV2d3h5ent8f/2gAMAwEAAhEDEQA/APUbLa6mF9rgxjRLnOMABcH1/wCu2Y6+Om3OxcatzmGwMDnPI/Pd6jHemz8xjPpqP1y63m29Vu6XXYK8fHLQ5vG4uax5c538j1Fj9E6dV1XKvx8p5oqwaHZFba4Dmu3s2/SGx/t9v0UyUiTQdrkuRxYsX3nmKmCBIR+aIjL/ALp2aeq/XK+rIyBkPrqxGNse19VbXPDx7PS3MVej65fWLFyGWZpfZWD+lxn1tY4N01+hW/8AOXTFsU21TDvsuKS0gF0bodvb+cuU+u7tn1iDWDikEMGg1ds3PEe5qREgLtdy0sGfJLHLDjjGQ0kI8PAI8L6F0/qeJ1HHGRiPFjDoexaf3XtP0VbleUdE6zl9Kyab8Gz1Ma54ZbQSdjtz9m5kN+m2V6tJ/BHjFWwf6K/pQx8X6og5OL9Lgjw/98//0J/Wmpr/AKz9QJAID2bhrJPoVja1v837mfvKx/i/qFvW8yuwB7HYoGp3DZuZtDT+fuWr9cPqrfbfZ1jBJfZYP1nHmNGs2etW6HO3bWM9i576sdVr6R1s5VrHehks9K2ACWyWu3uNft9jvZtUdVKzs9BHIM/IcGLWcYCJj14oh9NOJjQR6bYcGtOnZn823+ysLrFFHRR1X6xPc05NtIqxy8btpgiusN/l2O/MW3X1HBtpF9dzPT5kkD/on3Lhfrb1/H6xbXhYj3inFe51pAID7BpW33f6P+dUkjpbmcngy5MohUhHbJ/d+bh/5rzWPU6ag5u4i1rzDZe928OhrV7SuK+o/QZLesXt2sbIwqyDrOjszt9Nrnso/w";
    str += "C3f3F2cfHiVHwnh/F1jzmE89HHxfLCWLj/AEfcnOEvb/8AG+Hjf//R9T0XC/WPC+rN+eXM6icO4OPrsZU+yomPd/Ns9Jti8RSTZ7dPq3fh3F7p4fcuv8jwf8/3fS+ru6Z9W97S7rVJeCdPs1kE/wAuB9FGxenfVhlj35vVnW44hz666LmSAPfXucx/6Gz/AIL3/wAteRJJgrw/F1P1uv8Aujb/ACf3Xjfqav09jfTjZA2RxEe3apf3fgvldJTPP/pfX6v/2QA4QklNBCEAAAAAAF0AAAABAQAAAA8AQQBkAG8AYgBlACAAUABoAG8AdABvAHMAaABvAHAAAAAXAEEAZABvAGIAZQAgAFAAaABvAHQAbwBzAGgAbwBwACAAQwBDACAAMgAwADEAOQAAAAEAOEJJTQQGAAAAAAAHAAgAAAABAQD/4QzgaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzE0NSA3OS4xNjM0OTksIDIwMTgvMDgvMTMtMTY6NDA6MjIgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bXBNTTpEb2N1bWVudElEPSIyRjQxMTlDODhGRkMwNTlBRTA5RjYyNTQ0MEM2RjcyOCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpmNjY5OWQ3NC03Y2ZhLTM5NDUtYTA2My04ZDc1MjdmYjZkMzYiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0iMkY0MTE5Qzg4RkZDMDU5QUUwOUY2MjU0NDBDNkY3MjgiIGRjOmZvcm1hdD0iaW1hZ2UvanBlZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgcGhvdG9zaG9wOklDQ1Byb2ZpbGU9IkFkb2JlIFJHQiAoMTk5OCkiIHhtcDpDcmVhdGVEYXRlPSIyMDIzLTAyLTIwVDE2OjUxOjM3KzAzOjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMy0wMi0yMFQxNjo1NCswMzowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyMy0wMi0yMFQxNjo1NCswMzowMCI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOmY2Njk5ZDc0LTdjZmEtMzk0NS1hMDYzLThkNzUyN2ZiNmQzNiIgc3RFdnQ6d2hlbj0iMjAyMy0wMi0yMFQxNjo1NCswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTkgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg";
    str += "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA";
    str += "gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3hwYWNrZXQgZW5kPSJ3Ij8+/+ICQE";
    str += "lDQ19QUk9GSUxFAAEBAAACMEFEQkUCEAAAbW50clJHQiBYWVogB88ABgADAAAAAAAAYWNzcEFQUEwAAAAAbm9uZQAAAAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1BREJFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKY3BydAAAAPwAAAAyZGVzYwAAATAAAABrd3RwdAAAAZwAAAAUYmtwdAAAAbAAAAAUclRSQwAAAcQAAAAOZ1RSQwAAAdQAAAAOYlRSQwAAAeQAAAAOclhZWgAAAfQAAAAUZ1hZWgAAAggAAAAUYlhZWgAAAhwAAAAUdGV4dAAAAABDb3B5cmlnaHQgMTk5OSBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZAAAAGRlc2MAAAAAAAAAEUFkb2JlIFJHQiAoMTk5OCkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABjdXJ2AAAAAAAAAAECMwAAY3VydgAAAAAAAAABAjMAAGN1cnYAAAAAAAAAAQIzAABYWVogAAAAAAAAnBgAAE+lAAAE/FhZWiAAAAAAAAA0jQAAoCwAAA+VWFlaIAAAAAAAACYxAAAQLwAAvpz/7gAOQWRvYmUAZEAAAAAB/9sAhAABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAgICAgICAgICAgIDAwMDAwMDAwMDAQEBAQEBAQEBAQECAgECAgMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwP/wAARCAAzADkDAREAAhEBAxEB/90ABAAI/8QBogAAAAYCAwEAAAAAAAAAAAAABwgGBQQJAwoCAQALAQAABgMBAQEAAAAAAAAAAAAGBQQDBwIIAQkACgsQAAIBAwQBAwMCAwMDAgYJdQECAwQRBRIGIQcTIgAIMRRBMiMVCVFCFmEkMxdScYEYYpElQ6Gx8CY0cgoZwdE1J+FTNoLxkqJEVHNFRjdHYyhVVlcassLS4vJkg3SThGWjs8PT4yk4ZvN1Kjk6SElKWFlaZ2hpanZ3eHl6hYaHiImKlJWWl5iZmqSlpqeoqaq0tba3uLm6xMXGx8jJytTV1tfY2drk5ebn6Onq9PX29/j5+hEAAgEDAgQEAwUEBAQGBgVtAQIDEQQhEgUxBgAiE0FRBzJhFHEIQoEjkRVSoWIWMwmxJMHRQ3LwF+GCNCWSUxhjRPGisiY1GVQ2RWQnCnODk0Z0wtLi8lVldVY3hIWjs8PT4/MpGpSktMTU5PSVpbXF1eX1KEdXZjh2hpamtsbW5vZnd4eXp7fH1+f3SFhoeIiYqLjI2Oj4OUlZaXmJmam5ydnp+So6SlpqeoqaqrrK2ur6/9oADAMBAAIRAxEAPwDfw88J51r/AK7I1/8Aehf3cI7AEDB61My24BmNK/n/AIOiZ/MP5l9bfEnZDZ/dGQ+83PmnfGbM2pRL5clnM+1OZMfSsGbxY2jnkcq002iNiQuq7KCluLoQI1VqR/scepR9rPa7ffcfe5Laztq7bGUMj6oxpDV4BpELEkUoOHE+QOsLV/zx/m1PuuuanynTuOwEeYzGOixFZs0M1";
    str += "BJQV9LTJjajJtuinjfIUVPKKiVpNAkMnpuCPYZk3uZXND/g/wCgeuiNr9zbkK12cXe43Wm5VBq7LhqFqClVvSDxAwKfl0qdrfzhf5kG7MLld5bfout67r/aR8G7N3w9Y19QuMq3enVIauiXcKx03kkvGpe1nIQ2c6fehzEynQ70Ycf9WnoJbz92f2u22Sx22ScfvSYmi6Loahx4i6KCgPqOkPH/AD6PmV42y8LdZPgsZDRSZF63ryohSuSWono6gQQ025555IwI/UfRoclbek+1KcwRMBWX+R/6B6FV99zjktNhkv1tR44SvxT4qR/y+08/TrYz/l+fP7YPzL63iylPkcZR78xP2tDubARuQpqZKMSJNj1LT+WKoaJiI0lleIWD29iKynF9bh4QCR+X+GnWBXuv7T7nyHfXCLZsNnDHQxZWxXzAkdlHEDXk04mvVi0VWjTmIWFrNpubgv8AUHi/6wR/xr2q8J1Usy0HUOQRh7USpwqf9WepflH9f94/417ro+XRV9QP4v8AV+zr/9DbQ+ef8wXq/wCHG1KqPOV8U++sjRNJhsFHUU6PSeZamGny+WjcSVC4oyUkiCRUKs8ZAuR7Ty7pBZIK/HTHHh+w9Tr7Oe"
    str += "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";
    str += "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";

    str = "iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAIAAAAC64paAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADJSURBVDhPxZPBEcMwCAR5ugQ/U4rLUScuw2W4POUCZ6FApHEmj+xHhuMYDcJSf+Cu+TzPbduO42CsuBnyQwkVxrquIrIsC2PFzbBBzhWGSYCx4sG+79TfKwAuRWFkBtST2e5sMKV4MGoPmBUppTCleN2oPWA253nWijlZRR5YkxhfeNwGFu4GTMr52Owr/mj+uLQT+nppLzTa6kC/5K/DzADfE7/9OSzVZ5N+pY1wheBpQOLAcos59uY+7Zv+flXiU41a5PWqtT4BPro6xoP7aAMAAAAASUVORK5CYII=";
    const buf = Buffer.alloc(310, str, 'base64');
    console.log(buf.toString());
    response.end(buf);
})


//////////////////
server.start(443);